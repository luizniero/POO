# POO

Conteúdo:
  1) Conceitos básicos:  identidade, estado e comportamento
  2) Definição de Objetos por Classes
  3) Classes:  Campos, métodos e construtores
  4) Subclasses
  5) Herança e Sobrescrita
  6) Polimorfismo e subtipos
  7) Encapsulamento:  Campos privados, interfaces e classes abstratas
  8) Conceitos avançados:  Herança múltipla, mixins, threats e multimétodos.

Aula 1 ------
  
  	Linguagens orientadas a Objetos existem desde a década de 1960 e é atualmente o paradigma de programação mais utilizado.
  	As linguagens de programação mais utilizadas no mercado pertencem ao paradigma de POO.
  	A POO é uma evolução natural do desenvolvimento de software, tendo sido desenvolvida para atender a uma demanda por um estilo de programação mais eficiente 
e com menos linhas de código.
  	Orientação a objetos (OO) é um termo que engloba qualque estilo de desenvolvimento baseado no conceito de objeto (entidade que possui
características e comportamentos).  Aplica-se tanto à programação quanto à  analise e à modelagem.
  	A OO é também uma forma de ver o mundo para desenvolver soluções utilizando os objetos e os relacionamentos entre eles.
  
    		  Histórico da Programação de Computadores
      
  	A programação de computadores evoluiu muito nas últimas décadas, bem como os computadores e dispositivos.  Nos primórdios da informática,
os computadores eram compostos de válvulas eletromecãnicas que realizavam as operações e armazenavam dados.  Esses computadores eramam
programados diretamente no hwardware e os programas erm escritos diretamente na memória, em código binário.
  	Esse estilo de programação, além de ser muito difícil é extramamente propenso a erros e a falhas (bugs).  Mas ainda, a manutenão desses
programas é altamente custosa.
  	Devido à evolução do hwardware e o maior acesso de instruções acadêmicas a computadores, surgiu um contexto favorável á criação
de linguagens de mais alto nível.
  	A primeira dessas linguagens de alto nível foi o Fortran, criado em 1957, na IBM por uma equipe liderada por John Backus.
  	Essas primeiras linguagens pertencem ao paradigma procedual, no qual os programas são compostos de procedimentos que são chamados
sequenciamente.  Neste paradigma, os programas terminam quando todos os procedimentos da lista de procedimentos são chamados e
finalizados.
  	Exemplos de programa do paradigma procedual que resolve um sistema linear:
    	* Montagem da matriz e vetores do sistema
      	* Verificação de independ~encia linear
      	* Multiplicação de vetor por matriz
      	* Exibição dos resultados
      
      
	Apesar da evolução da programação de computadores ter sido bastante significativa na transição de código binário para linguagens dea
alto nível do paradigma procedual, existem alguns aspectos desse paradigma que comprometem o bom desempenho do desenvolvimento de
software. 
	Esses aspectos são a não reutilização de código e o caminho de execução confuso de um programa escrito sob o paradigma procedual.
Muito frequentemente é necessário escrever procedimentos para desempenhar funções similares ou até mesmo idênticas.
	Além disso, a programação procedual isola os dados dos procedimentos, tratanto estes de maneira separada.  Desta forma, uma pequena
modificação no programa pode acarretar na necessidade de se realizar alterações no código interno.  isso dificulta a manutenção do
programa.
	Na tentativa de melhorar alguns aspectos da programação procedual, surgiu a programação modular, representada pela linguagem
Moduler 2.  Nesse estilo de programação, os programas são divididos em módulos que combinam dados e operações sobre os dados.  Nos
módulos, os dados internos ficam ocultos do restante do programa, sendo necessário o uso de interfaces.
	Os módulos contém informações de estado dos dados (variáveis) internas.  Contudo, os módulos não são extensíveis, não
permitindo que eles sejam alterados para ampliar suas funcionalidades, Além de não permitirem que um módulo seja baseado em outro.


	A POO surge3 então como uma evolução natural da programação modular, adicionando os conceitos de herança e polimorfismo.  Os
conceitos de herança, polimorfismo, juntamente com o conceito de encapsulamento formam os pilares da POO.
	Um programa orientado a objetos é dividido em objetos em que cada objeto representa alguns aspectos do problema a ser resolvido.
	O foco da POO é manipular os objetos e os relacionamentos entre eles para direcionar o fluxo global de execução do programa.
	A primeira etapa do desenvolvimento OO é o entendimento do domínio do problema e a elaboração de uma solução em nível conceitual.
	
	DEFINIÇÃO DE OBJETO:  
		* Objeto é uma construção de software que encapsula estado e comportamentos
		* Elemento computacional que representa no domínio da solução alguma entidade, abstrata ou concreta.
		* Um objeto é uma entidade que possui uma identidade.
		* Objetos são instâncias de uma classe
	
	DEFINIÇÃO DE CLASSE:
		* A classe define todas as características e comportamentos comuns a um tipo de objeto
		* Uma classefunciona como um molde para a criação de objetos, especificando quais são seus atributos (características)
	e métodos (comportamentos).
	
	DEFINIÇÃO DE ATRIBUTO:
		* São características de um objeto (ex: Cor, nome, tipo, etc).
		
	DEFINIÇÃO DE MÉTODO:
		* Ação executada por um objeto quando uma mensagem é passada em resposta a uma mudança de estado

	COMUNICAÇÃO ENTRE OBJETOS
		Um objeto pode acionar ou exercer o comportamento de outro objeto ao executar uma operçaão sobre este último.
	Essa interação é chamada de passagem de mensagens ou chamada a método ou chamada a função.  Isso omite detalhes de 
	implementação e funcionamento dos objetos.
	
	RESUMINDO
		 A classe define o molde para a criação dos objetos.  A classe também define quais serão as características e
	comportamentos comuns a todos os objetos da classe.
		O objeto é uma instância da classe que possui valores próprios para os atributos e executam métodos sobre esses dados.
		
	VANTAGENS DA ORIENTAÇÃO A OBJETOS
		1) Natural
		2) Confiável
		3) Reutilizável
		4) Manutenção
		5) Extensível
		6) Oportuna
		
	ENCAPSULAMENTO
		O primeiro pilar da POO é o encapsulamento, característica de ocultar partes da implementação dos demais objetos
	utilizados no sistema.
		Deixa indisponível os detalhes de implementação de alguma funcionalidade.  O encapsulamento permite a criação
	dos chamados softwares caixa preta.
		Nos software caixa preta, as demais partes do sistema vêem apenas a interface.  Uma interface lista os serviços
	disponíveis para o restante do sistema que são formados por aquele objeto.  A interface pode ser vista como  o painel
	de controle do objeto, especificando o que o objeto pode fazer sem que se saiba como as coisas são feitas.
	
	
		TIPOS DE ENCAPSULAMENTO
			PÚBLICO (+) : Todos os objetos tem acesso à informação;
			PROTEGIDO (#): Apenas as instâncias da classe e subclasses tem acesso à informação;
			PRIVADO (-):  Apenas as instâncias da classe tem acesso à informação.
		Exemplo:
		
			|-------------------------------|
			|	Pessoa			|
			|-------------------------------|
			| Nome				|
			| RG				|
			| Data Nasc			|
			|-------------------------------|
			| Cadastrar():void		|
			| Obter_info():void		|
			| Calcular_Idade(data_hoje):int |
			|-------------------------------|
		
			
	MÉTODOS ESPECIAIS
	
		MÉTODOS CONSTRUTORES: Método chamado no momento da criação do objeto.  Comumente atribui valores iniciais ao
		objeto.  Deve possuir o mesmo nome da classe, são métodos públicos e não possuem especificador de tipo de retorno.
		
		MÉTODOS DESCONSTRUTORES: São métodos especiais que liberam o espaço alocado pelos objetos quando eles não são mais
		necessários ao programa.  São declarados pelo mesmo nome da classe precedido do símbulo.  Não possuem especificador
		do tipo retorno.
		
		MÉTODOS ACESSORES: São métodos que dão acesso às informações do objeto.  Servem como intermediários entre os
		atributos, normalmente privados, e os demais objetos do programa.  Os métodos acessores são iniciados pela
		palavra GET.
		
		MÉTODOS MODIFICADORES: São métodos que realizam a modificação das informações do objeto.  São utilizado para
		prevenir e evita alterações indesejadas dos atributos da classe.  Os métodos modificadores são iniciados pela
		palavra SET.
		
			|-------------------------------------------------------|
			|	Pessoa						|
			|-------------------------------------------------------|
			| Nome: string						|
			| CPF:  string						|
			| Idade: int						|
			| Salario: float					|
			|-------------------------------------------------------|
			| Pessoa()						|
			| Atualizar_cadastro (string Nome, string CPF):void     |
			| setSalario(float Salario):void			|
			| getSalario():float					|
			| Cadastrar_Idade(int dn, int mn, int an):void		|
			| getIdade():int					|
			| displayInfo():void					|
			|-------------------------------------------------------|

AULA 3 - Prática - Exercícios no repositório POO.			
AULA 4 ---------------------------------------------------------------------------------------------------------------------------

	SOBRECARGA DE MÉTODOS
		Em determinadas ocasiões, podem existir duas ou mais formas de se implementar a mesma funcionalidade.
	Na programação procedual, criam-se dois procedimentos (funções) com nomes distintos para executar a mesma funcionalidade
	de formas diferentes.
		Nas linguagens orientadas a objetos há a possibilidade de utilizar métodos com o mesmo nome, definidos dentro
	da mesma classe, que implementam a mesma funcionalidade de maneiras diferentes.  Para tanto, é preciso que este
	métodos sejam diferentes em sua lista de parâmetros, diferentes na qualidade, tipos ou ordens de parâmetros.
		Tem como objetivo facilitar a nomenclatura:  não tem de dar nomes diferentes para métodos que fazem a mesma coisa

	HERANÇA
	
		O encapsulamento permite que um objeto use outro objeto através da mensagem (ex: getPreco).
		A herança é uma outra maneira de relacionamento entre objetos
		"Herança é um mecanismo que permite criar a definição de uma nova classe baseada em uma classe previamente existente".
		Quando uma classe realiza a herança de outra, todos os métodos e atributos automaticamente aparecerão na nova classe,
	condicionado ao encapsulamento desejado.
	
		Considere a classe Empregado
		classe Empregado{
			private:
				char nome[100];
				float salario;
			public:
				Empregado(char nome[], float salario);
				float getSalario();
				char* getNome();
		};
		
		A classe Empregado pode aparecer em um sistema de folha de pagamento, por exemplo.
		Agora, considere a criação da classe EmpregadoComissionado, que, receba comissão por venda que realiza.
	Como podemos implementar essa nova classe?
		
		Note que, exceto pelo valor da comissão e o número de produtos vendidos, as classes Empregado e Empregado Comissionado
	são idênticas.
		Existem 3 opções de implementação de classe EmpregadoComissionado:
		
		Opção1: Poderíamos copiar o código da classe Empregado e adaptar o código às especificações ca classe
		Empregado Comissionado e adaptar o código às especificações da nova classe.  Esta opção não representa uma boa
		opção, pois qualquer alteração na forma de tratamento de Empregados no sistema implica na necessidade de
		alteração em diferentes partes do código.
		
		Opção2:  Podemos incluir um objeto empregado como atributo da classe Empregado Comissionado.  Essa solução implica
		em um problema conceitual na especificação da solução (o empregado comissonado deve ter um empregado como
		característica).  Além disso, a operação da classe é totalmente dependente da passagem de mensagem a alguem,
		ou todos, os métodos precisam ser redefinidos.
	
		Opção3:  Utilizar herança para basear a classe Empregado comissionado
		
		class EmpregadoComissionado:Empregado{ //O dois pontos é a sintaxe para a herança.
			private:
				float comissao;
				int unidades
			public:
				EmpregadoComissionado(char* nome, float salario, float comissao);
				float calcularPagamento();
				void registrarVenda();
				void zerarVendas();
		};
		Não consigo ter acesso aos atributos privados da classe Empregado, mas tenho acesso aos métodos (getnome, getsalario).
		Posso utilizar, EmpregadoComissionado->getNome(), e ele então irá assionar getnome() da classe Empregado, que foi a 
		origem da herança.
		
		A herança pode ser usada para aproveitar a implementação para atender a mua necessidade específica, e também é uma
		forma de agrupar classes relacionadas.
		
		Nonemclatura
			* Class bare ou classe mãe ou superclasse é a classe que servirá de base para outras;
			* Classe derivada ou classe filha ou subclasse é a classe que herda as informações de outra classe.
		
		Quando usar a Herança
			Imagine que você tem 2 classes (A e B).
			A hernaça deve ser utilizada quando um objeto da classe A é um objeto da classe B também.
		ex: Se a classe A tem a classe B então não é o mais indicado usar herança. Ex:  O carro tem o motor
		
		HIERARQUIA DE CLASSES
			As classes em um programa podem  herdar comportamento e atributos de uma outra classe, e, ao mesmo tempo,
			servir de base para a criação de novas classes.  Os objetos conseguem acessar métodos e atributos que
			estão em classes superiores na hierarquia de herança.
			
				       	______________
					|__Classe A__|
			__________________|________|__________________
			|__Classe B__|			|__Classe C__|	
							_________|________________
						________|____		________|_____
						|__Classe D__|		|__Classe E__|
	
	
		Tipos de métodos e atributos da herança
			* Sobreposto (sobrescrito): redefinição;
			* Novo: adição de novo componente;
			* Recursivo:  utiliza o método da classe base.

UTILIZANDO IDE'S NO C++
	
	DIVIDINDO O CÓDIGO EM ARQUIVOS
	 -> Criar um Projeto no dev c++
	 	Cada arquivo de classe será dois arquivos:  um arquivo de cabeçalho, .h, e um arquivo de implementação, .cpp.
	 	Criar um projeto.
	 	Adicionr arquivos.
	 	salvar, num arquivo do projeto, o código.  O nome do arquivo deve ser o nome da classe.
	 	Criar um arquivo, que contém da primeira linha até o fim da implementação da classe, e salvar como nomedaclasse.h;
	 	No arquivo do código (item.cpp), dar um include no arq. de cabeçalho(item.h).
		No final de toda divisão, no linux, compile os itens .cpp, e então ele irá gerar o executável no que você pedir.
		
		Ex: g++ ItensLista.cpp Itens.cpp main.cpp -o ItensLista
		
		
RETORNANDO A HERANÇA....
		# = atributo protegido (nem público e nem privado)
			|-----------------------------------------------| 	|---------------------------------------|
			|		Conta_Bancaria			|	|		Conta_Poupanca		|
			|-----------------------------------------------|	|---------------------------------------|
			|	# Nome: string				|	|	- Aniversario: string		|
			|	# Agencia: int				|	|	- Taxa: float			|
			|	# NroConta: int				|<------|---------------------------------------|
			|	# Saldo: float				|	| + Conta_Poupanca(); //construtor	|
			|-----------------------------------------------|	| + void fazAniversario();		|
			| + Conta_Bancaria(); //construtor		|	| + float getSaldo();			|
			| + void Cadastro();				|	| + void Cadastro();			|
			| + float getSaldo();				|	|---------------------------------------|
			| + boolean deposito(float);			|
			| + boolean saque (float);			|<------|---------------------------------------|
			|-----------------------------------------------|	|		Conta_Corrente		|
										|---------------------------------------|
			|-------------------------------|			|	- Manutencao: float		|
			|	Conta_Especial		|			|	- Aniversario: string		|
			|-------------------------------|			|---------------------------------------|
			|	- Limite: float		|---------------------->| + Conta_Corrente();//construtor	|
			|	- Juros: float		|			| + void aplicarManutencao();		|
			|-------------------------------|			| + void Cadastro();			|
			| + Conta_Especial();		|			| + float getSaldo();			|
			| + void Cadastro();		|			|---------------------------------------|
			| + bool saque(float);		|
			| + bool deposito(float);	|
			|-------------------------------|
			
	Na anotação da UML, puxaremos uma seta da conta_poupança da conta bancária


	TIPOS DE HERANÇA

- Herança para reutilização da implementação/herança para implementação

- Herança para diferença

- Herança para substituição do tipo

a herança para implementação é usada quando se deseja apenas reaproveitar o desenvolvimento de  umaa classe.
Nesse caso a herança nao representa a relação entre as classes, apenas é usada como forma de economizar código.
Nesse tipo de herança, o programador fica preso à implementação da classe mãe, precisando sobrepor muitos métodos 
e aumentando a dificuldade da manutenção de software.

 O uso da herança para reutilização da implementação não é, normalmente, uma estratégia muito inteligente,
 pois em alguns casos todo, ou quase todo o código terá que ser reescrito.
 
 este tipo de herança, quando mal feita representa mais problemas do que facilidades.
 
 
 A herança por diferença é utilizada quando a sub classe difere da superclasse em alguns aspectos, mas mantém uma forte conexão com a classe base.
 É comumente conhecido como especialiazação, que traz para a implementação da classe filha apenas os pontos de diferenciação.
 
 O uso adequado da herança por diferença permite que se realize a programação incremental, isto é, a adição de funcionalidades ao programa sem comprometer as funcionalidades já existentes.
 a programação incremental possibilita a escrita de códigos menores e de mais fácil manutenção.
 
 a especialização não exclui comportamento da classe base, pois não é possível fazer herança seletiva.
 
 a especialização é feita adicionando novos métodos à classe base ou redefinindo métodos já existentes.
 ao percorrer a hierarquia de heranaça de cima para baixo faz-se a especialização e ao pearcorrer a 
 hierarquia de baixo para cima faz-se a generalização.
 
 A herança por substituição de tipo dá ao métodos a capacidade de substituição, isto é, um método que utiliza um objeto de uma superclasse pode
 também utilizar um objeto de uma classe derivada sem a necessidade de alterar o tipo do objeto e também não compromete o funcionamento do sistema.
 
 A herança por substituição de tipo confere ao programa uma possibilidade maior de reutilização de codigo e permite que a operação de objetos tenha seu contexto ampliado.
 
 essa característica de ampliação do contexto de operação é chamada de capacidade de conexão, que é uma característica bastante poderosa no desenvolvimento de software, pois
 permite ao programa utilizar subtipos.
 
 um subtipo é um tipo que estende outro por meio de herança
 
 ENCAPSULAMENTO DE HERANÇA
 
 A herança pode ser pública, privada ou protegida.
 
 Na herança pública todos os membros da classe base mantém seu encapsulamento nas classes derivadas, isto é, os membros públicos da calsse base permanecem públicos nas classes derivadas e
 os membros protegidos permanecem protegidos. Os membros privados não são acessíveis.
 Na herança protegida, os membors públicos tornam-se protegidos na classe derivada e os membros protegidos tornam-se privados.
 Na herança privada tanto os membros públicos quanto os membros protegidos tornam-se privados na classe derivada.
 As heranças protegida e privada limitam a profundidade da hierarquia de herança.
 
 Herança Múltipla
 
 O paradigma de orientação a objetos prevê a existência de herança de múltiplas classes, contudo nem todas as linguagens implementam essa possibilidade.
 Na herança múltipla uma classe herda as caracterísitcas e comportamentos de duas ou mais classes base.
 
 A herança múltipla é um instrumento poderoso na construção de sistemas de informação orientados a objetos. Entretanto, o planejamento e a manutenção de
 programas que se utilizam desse instrumento torna-se mais complexo e, caso não seja utilizado de forma adequada, pode deixar o software com problemas de organização, aumentando
 a possibilidade de erros e a dificuldade na manutenção.
 
 a linguagem c++ permite a herança múltipla que é implementada da seguinte forma:
 
 
 class classeD:encap ClasseB1,classeB2,classeb3{
 	...
 };
 
 Aplicação								Conta_Premium			
 #rendimento								#Manutencao
 #periodicidade								------------------
 --------------    		-------------------->			+baixaautomatica
 +Aplicação()					      /			+Aplicacaoautomatica
 +obterRetorno() 				    /  			+ConsultarRendimentos
 +aplicar(valor)				  /
						/
		  			     /
 Conta_Corrente				   / 			   
 #Ag					  /				
 #Nro					 /			 
 #Saldo					/				
 ---------------   -------------------->  
 +Conta Corrente()
 +Saque
 +Deposito
 +VerSaldo




	FUNÇÕES VIRTUAIS
	
	As funções virtuais são usadas para permitir uma associação dinãmica de um método à sua implementação.  Isso é útil no caso de
diferentes classes com métodos em comum, embora com implementações diferentes, que estão relacionadas por meio de herança.
	Desta forma, as funções virtuai spermitem que o método a ser acionado seja determinad odinamicamente, a este processo de
associação do nome do método à sua implementação dá-se o nome de vinculação
Sintaxe: Um método ou função virtual é declarado com o uso da palavra reservada VIRTUAL

Ex:
	Virtual void MetodoExemplo();
	
Exemplo de uso de funções virtuais:
	Considere a classe FormaGeometrica que tem como subclasses as classes Triangulo, Retangulo, Quadrado e Circulo.  Cada uma
das classes derivadas possui seu proprio metodo de calculo de area, o qual é diferente em cada uma desses classes.  A utilização
de funções virtuais permite que se utilize o método de cálculo de área da classe FormaGeometrica e, dinamicamente, o programa aciona 
a implementação correta de acordo com a refer~encia à subclasse adequada.  Isso somente é possível com a utilização da herença por
substituição de tipo, já vista anteriormente.
Observação:  Um método declarado como virtual permanece virtual em toda a hierarquia da herança, mesmo que nas classes derivadas
não se utilize a palavra virtual.  Para dar maior clareza, recomenda-se a declaração do método virtual em todas as classes
derivadas.

	CLASSES ABSTRATAS
	
	Em algumas ocasiões desejamos criar uma classe base que será usada apenas para herança, não possuindo nenhum objeto
instanciado.  Por exemplo, a definição da classe ContaBancaria, a qual servirá apenas de base para a herança.  Os objetos,
nesse desenvolvimento serão apenas das classes derivadas (ContaSimples, ContaCorrente, ContaPoupanca, etc) e não da classe base.
	Nesta situação, pode-se definir uma classe abstrata, que nada mais é do que uma classe que não pode ter objetos iniciados.
Para que uma classe seja abstrata, devemos declarar pelo menos uma função virtual pura. (mesmo assim ela pode ter construtor,
pois eu posso usa-lo no meio da herança).  Uma função virtual pura não possui implementação e é inicializada com o valor 0.

Sintaxe:  virtual tipoRetorno Nome (parametros) = 0;

	Ao tentarmos instanciar um objeto de uma classe abstrata, o compilador apresenta um erro de sintaxe.  As classes derivadas
de uma classe abstrata devem sobrescrever os métodos virtuais puros com a devida implementação para que estas tornem-se classes
concretas.
	Observação:  Uma classe concreta é aquela que pode ter objetos instanciados.  Por outro lado as classes abstratas
não podem ter objetos instanciados


	INTERFACES
	Em c++ uma interface é uma classe que possui apenas funções virtuais puras e um destrutor virtual vazio para garantir que
os objetos não mais utilizados sejam liberados da memória ao termino de sua utilização.  Assim como as classes abstratas, as
interfaces não podem ter objetos instanciados.  Contudo, as interfaces diferem das classes abstratas por não possuírem nenhuma
implementação.
	Ao utilizarmos interfaces, toda a implementação fica a cargo das classes derivadas
Benefícios do uso de interfaces:
	- Deixam disponível apenas o comportamento da classe, tornando mais fácil a inclusão de incrementos ou o tratamento das
mudanças no software.
	- Melhor utilização da abstração, pois deixa-se visível apenas o que pode ser acessado, forçando a escrita de código abstrato.
	- Previne excesso de recompilação de código, pois diminui dependências entre implementações
	
	
	POLIMORFISMO
	
	Software estão em constante evolução, por isso o desenvolvimento deve se antever as possibilidades de mudança e deixar um
caminho pronto para as alterações que possam existir.
	Um software de sucesso não é estático.  Na POO, o polimorfisom é o que confere essa capacidade de adaptação à mudanças,
facilitando a evolução do software.
	O polimorfismo é o 3º pilar da POO e este não existe sem os outros 2.  Portanto, para entender o polimorfismo é preciso
entender de encapsulamento e herança.
	Polimorfismo significa muitas formas, na programação remete a capacidade de um único nome de classe ou método poder
estar associado a diferentes implementações que são vinculadas dinamicamente.
exemplo:
	classe Personalidade
	subclasses: Otimista, Pessimista, Introvertido, Extrovertido
	
	Ao usarmos herança para substituição de tipo, um objeto da classe personalidade pode se comportar como qualquer uma das
subclasses. 
	O polimorfismo pode ser dividido em 4 tipos:
		- Polimorfismo de inclusão
		- Polimorfismo paramétrico
		- Sobrescrita
		- Sobrecarga
	
	Os 3 últimos tipos já foram vistos, sendo que o polimorfismo paramétrico é obtido com o uso de gabaritos (templates).

	O polimorfismo de inclusão é feito com o uso de uma referência á classe base (ponteiro), que pode apenas conter funções
virtuais, pode ser uma classe abstrata ou uma interface.  A este ponteiro associamos um objeto de uma de suas subclasses, da 
mesma forma da herança por substituição de tipo.
	A implementçaão de polimorfismo depende da utilização de funções virtuais, para que haja a vinculação dinãmica dos métodos.
	A utilização de classes abstratas inibe a instanciação de objetos, mas não de ponteiros.  Desta forma, torna-se possível
sua utilização para implementar polimorfismo.  É por meio do uso de interfaces e polimorfismo que se torna possível o acoplamento
de software e integração de diferentes componentes.


25/06/2016 - ultimo tópico da matéria

		Objetos e Métodos Constantes
		
	Existem determinadas situações em que alguns objetos ou informações não podem ser alterados ao longo da execução do programa.
A estes objetos e informações deve ser atribuídos a propriedade ser constantes.
	A palavra reservada CONST deve ser utilizada para especificar objetos e informações que não são modificáveis.
	Um erro de sintaxe é exibido ao tentarmos modificar o valor de um objeto const.
	Para os objetos const não é permitido fazer chamada e nenhum método ou função que não sejam igualmente delcarados como const.
	Um método ou função cnstatne possui a palavra reservada CONST após a lista de parãmetros
	
Exemplo:  int Classe::getValor() const {
		returnValor;
	  }
	  
	  Nãoi é possível definir como const métodos que modifiquem as informações do objeto como, por exemplo, os métodos
modificadores (set).
	Os métodos construtores e destrutores não devem ser declarados como const, pois necessitam modificar as informações
do objeto.
	Note que os métodos construtores podem ser chamados mesmo para objetos const.
	Quando se declaram membros atributos, de uma classe como constantes, esses membros devem ser inicializados com o uso
de inicializadores.
	Os inicializadores levam o mesmo nome do atributo e são chamados com o operador dois pontos (:).  Após a lista de
parametros da implementação do método.
	Caso seja necessário acionar mais um inicializador, estes devem ser separados por vírcula (,).


		ITERADORES
		
	Iterador ´[e um conceito que descreve em tipo que pode ser utilizado para referenciar os elementos de um conteiner.
	Devem implementar pelo menos os operadores de incremento(++) e referência(*).
	
	Categorias de Iteradores
		Input
		Output
		Forward
		Bidirecional
		Random Access
	
	Propriedades dos Iteradores
		Todos os iteradores devem permitir a construção por cópia (a=b) e por assignment b(a)
		Todos devem ser incrementáveis:  ++a e a++
		
	Iteradores de Input
		Permitem comparação de igualdade (==) e desigualdade (!=)
		Podem ser referenciados (tratados como ponteiros) (*a) (a->m)
		
	Interadores de Output
		Inplementam as característica dos iteradores de Input
		Permitem a atribuição de valores de maneira indireta através de ponteiros
		
	Iteradores Forward
		Implementam as características dos iteradores de output
		Devem possuir construtor padrão:  tipo(), tipo a;
		Devem ter a p´ropriedade de multipass, isto é, o tratamento do iterador, como um ponteiro não interfere
		na capacidade de incremento
		
	Iteradores Bidirecionais
		Implementam as características dos iteradores forward
		Podem efetuar a operação de decremento(--)
		
	Iteradores Random Access
		Implementam as características dos iteradores Bidirecionais
		Implementar operações aritméticas de soma(+) e subtração(-)
		Suportam comparação de desigualdade (>,<,>=,<=)
		Suportam atribuições compostas (+=, -=)
		Suportam o operador de deslocamento ([]=> vetor de iteradores)
		
		
