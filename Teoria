# POO

Conteúdo:
  1) Conceitos básicos:  identidade, estado e comportamento
  2) Definição de Objetos por Classes
  3) Classes:  Campos, métodos e construtores
  4) Subclasses
  5) Herança e Sobrescrita
  6) Polimorfismo e subtipos
  7) Encapsulamento:  Campos privados, interfaces e classes abstratas
  8) Conceitos avançados:  Herança múltipla, mixins, threats e multimétodos.

Aula 1 ------
  
  	Linguagens orientadas a Objetos existem desde a década de 1960 e é atualmente o paradigma de programação mais utilizado.
  	As linguagens de programação mais utilizadas no mercado pertencem ao paradigma de POO.
  	A POO é uma evolução natural do desenvolvimento de software, tendo sido desenvolvida para atender a uma demanda por um estilo de programação mais eficiente 
e com menos linhas de código.
  	Orientação a objetos (OO) é um termo que engloba qualque estilo de desenvolvimento baseado no conceito de objeto (entidade que possui
características e comportamentos).  Aplica-se tanto à programação quanto à  analise e à modelagem.
  	A OO é também uma forma de ver o mundo para desenvolver soluções utilizando os objetos e os relacionamentos entre eles.
  
    		  Histórico da Programação de Computadores
      
  	A programação de computadores evoluiu muito nas últimas décadas, bem como os computadores e dispositivos.  Nos primórdios da informática,
os computadores eram compostos de válvulas eletromecãnicas que realizavam as operações e armazenavam dados.  Esses computadores eramam
programados diretamente no hwardware e os programas erm escritos diretamente na memória, em código binário.
  	Esse estilo de programação, além de ser muito difícil é extramamente propenso a erros e a falhas (bugs).  Mas ainda, a manutenão desses
programas é altamente custosa.
  	Devido à evolução do hwardware e o maior acesso de instruções acadêmicas a computadores, surgiu um contexto favorável á criação
de linguagens de mais alto nível.
  	A primeira dessas linguagens de alto nível foi o Fortran, criado em 1957, na IBM por uma equipe liderada por John Backus.
  	Essas primeiras linguagens pertencem ao paradigma procedual, no qual os programas são compostos de procedimentos que são chamados
sequenciamente.  Neste paradigma, os programas terminam quando todos os procedimentos da lista de procedimentos são chamados e
finalizados.
  	Exemplos de programa do paradigma procedual que resolve um sistema linear:
    	* Montagem da matriz e vetores do sistema
      	* Verificação de independ~encia linear
      	* Multiplicação de vetor por matriz
      	* Exibição dos resultados
      
      
	Apesar da evolução da programação de computadores ter sido bastante significativa na transição de código binário para linguagens dea
alto nível do paradigma procedual, existem alguns aspectos desse paradigma que comprometem o bom desempenho do desenvolvimento de
software. 
	Esses aspectos são a não reutilização de código e o caminho de execução confuso de um programa escrito sob o paradigma procedual.
Muito frequentemente é necessário escrever procedimentos para desempenhar funções similares ou até mesmo idênticas.
	Além disso, a programação procedual isola os dados dos procedimentos, tratanto estes de maneira separada.  Desta forma, uma pequena
modificação no programa pode acarretar na necessidade de se realizar alterações no código interno.  isso dificulta a manutenção do
programa.
	Na tentativa de melhorar alguns aspectos da programação procedual, surgiu a programação modular, representada pela linguagem
Moduler 2.  Nesse estilo de programação, os programas são divididos em módulos que combinam dados e operações sobre os dados.  Nos
módulos, os dados internos ficam ocultos do restante do programa, sendo necessário o uso de interfaces.
	Os módulos contém informações de estado dos dados (variáveis) internas.  Contudo, os módulos não são extensíveis, não
permitindo que eles sejam alterados para ampliar suas funcionalidades, Além de não permitirem que um módulo seja baseado em outro.


	A POO surge3 então como uma evolução natural da programação modular, adicionando os conceitos de herança e polimorfismo.  Os
conceitos de herança, polimorfismo, juntamente com o conceito de encapsulamento formam os pilares da POO.
	Um programa orientado a objetos é dividido em objetos em que cada objeto representa alguns aspectos do problema a ser resolvido.
	O foco da POO é manipular os objetos e os relacionamentos entre eles para direcionar o fluxo global de execução do programa.
	A primeira etapa do desenvolvimento OO é o entendimento do domínio do problema e a elaboração de uma solução em nível conceitual.
	
	DEFINIÇÃO DE OBJETO:  
		* Objeto é uma construção de software que encapsula estado e comportamentos
		* Elemento computacional que representa no domínio da solução alguma entidade, abstrata ou concreta.
		* Um objeto é uma entidade que possui uma identidade.
		* Objetos são instâncias de uma classe
	
	DEFINIÇÃO DE CLASSE:
		* A classe define todas as características e comportamentos comuns a um tipo de objeto
		* Uma classefunciona como um molde para a criação de objetos, especificando quais são seus atributos (características)
	e métodos (comportamentos).
	
	DEFINIÇÃO DE ATRIBUTO:
		* São características de um objeto (ex: Cor, nome, tipo, etc).
		
	DEFINIÇÃO DE MÉTODO:
		* Ação executada por um objeto quando uma mensagem é passada em resposta a uma mudança de estado

	COMUNICAÇÃO ENTRE OBJETOS
		Um objeto pode acionar ou exercer o comportamento de outro objeto ao executar uma operçaão sobre este último.
	Essa interação é chamada de passagem de mensagens ou chamada a método ou chamada a função.  Isso omite detalhes de 
	implementação e funcionamento dos objetos.
	
	RESUMINDO
		 A classe define o molde para a criação dos objetos.  A classe também define quais serão as características e
	comportamentos comuns a todos os objetos da classe.
		O objeto é uma instância da classe que possui valores próprios para os atributos e executam métodos sobre esses dados.
		
	VANTAGENS DA ORIENTAÇÃO A OBJETOS
		1) Natural
		2) Confiável
		3) Reutilizável
		4) Manutenção
		5) Extensível
		6) Oportuna
		
	ENCAPSULAMENTO
		O primeiro pilar da POO é o encapsulamento, característica de ocultar partes da implementação dos demais objetos
	utilizados no sistema.
		Deixa indisponível os detalhes de implementação de alguma funcionalidade.  O encapsulamento permite a criação
	dos chamados softwares caixa preta.
		Nos software caixa preta, as demais partes do sistema vêem apenas a interface.  Uma interface lista os serviços
	disponíveis para o restante do sistema que são formados por aquele objeto.  A interface pode ser vista como  o painel
	de controle do objeto, especificando o que o objeto pode fazer sem que se saiba como as coisas são feitas.
	
	
		TIPOS DE ENCAPSULAMENTO
			PÚBLICO (+) : Todos os objetos tem acesso à informação;
			PROTEGIDO (#): Apenas as instâncias da classe e subclasses tem acesso à informação;
			PRIVADO (-):  Apenas as instâncias da classe tem acesso à informação.
		Exemplo:
		
			|-------------------------------|
			|	Pessoa			|
			|-------------------------------|
			| Nome				|
			| RG				|
			| Data Nasc			|
			|-------------------------------|
			| Cadastrar():void		|
			| Obter_info():void		|
			| Calcular_Idade(data_hoje):int |
			|-------------------------------|
		
			
	MÉTODOS ESPECIAIS
	
		MÉTODOS CONSTRUTORES: Método chamado no momento da criação do objeto.  Comumente atribui valores iniciais ao
		objeto.  Deve possuir o mesmo nome da classe, são métodos públicos e não possuem especificador de tipo de retorno.
		
		MÉTODOS DESCONSTRUTORES: São métodos especiais que liberam o espaço alocado pelos objetos quando eles não são mais
		necessários ao programa.  São declarados pelo mesmo nome da classe precedido do símbulo.  Não possuem especificador
		do tipo retorno.
		
		MÉTODOS ACESSORES: São métodos que dão acesso às informações do objeto.  Servem como intermediários entre os
		atributos, normalmente privados, e os demais objetos do programa.  Os métodos acessores são iniciados pela
		palavra GET.
		
		MÉTODOS MODIFICADORES: São métodos que realizam a modificação das informações do objeto.  São utilizado para
		prevenir e evita alterações indesejadas dos atributos da classe.  Os métodos modificadores são iniciados pela
		palavra SET.
		
			|-------------------------------------------------------|
			|	Pessoa						|
			|-------------------------------------------------------|
			| Nome: string						|
			| CPF:  string						|
			| Idade: int						|
			| Salario: float					|
			|-------------------------------------------------------|
			| Pessoa()						|
			| Atualizar_cadastro (string Nome, string CPF):void     |
			| setSalario(float Salario):void			|
			| getSalario():float					|
			| Cadastrar_Idade(int dn, int mn, int an):void		|
			| getIdade():int					|
			| displayInfo():void					|
			|-------------------------------------------------------|

AULA 3 - Prática - Exercícios no repositório POO.			
AULA 4 ---------------------------------------------------------------------------------------------------------------------------

	SOBRECARGA DE MÉTODOS
		Em determinadas ocasiões, podem existir duas ou mais formas de se implementar a mesma funcionalidade.
	Na programação procedual, criam-se dois procedimentos (funções) com nomes distintos para executar a mesma funcionalidade
	de formas diferentes.
		Nas linguagens orientadas a objetos há a possibilidade de utilizar métodos com o mesmo nome, definidos dentro
	da mesma classe, que implementam a mesma funcionalidade de maneiras diferentes.  Para tanto, é preciso que este
	métodos sejam diferentes em sua lista de parâmetros, diferentes na qualidade, tipos ou ordens de parâmetros.
		Tem como objetivo facilitar a nomenclatura:  não tem de dar nomes diferentes para métodos que fazem a mesma coisa

	HERANÇA
	
		O encapsulamento permite que um objeto use outro objeto através da mensagem (ex: getPreco).
		A herança é uma outra maneira de relacionamento entre objetos
		"Herança é um mecanismo que permite criar a definição de uma nova classe baseada em uma classe previamente existente".
		Quando uma classe realiza a herança de outra, todos os métodos e atributos automaticamente aparecerão na nova classe,
	condicionado ao encapsulamento desejado.
	
		Considere a classe Empregado
		classe Empregado{
			private:
				char nome[100];
				float salario;
			public:
				Empregado(char nome[], float salario);
				float getSalario();
				char* getNome();
		};
		
		A classe Empregado pode aparecer em um sistema de folha de pagamento, por exemplo.
		Agora, considere a criação da classe EmpregadoComissionado, que, receba comissão por venda que realiza.
	Como podemos implementar essa nova classe?
		
	
	
	
	
		
		
		
	
	
	
	
	
	
	
	
		
		
		
		
