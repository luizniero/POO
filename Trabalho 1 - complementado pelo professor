#include<iostream>
#include<clocale>
#include<ctime>
#include<cstdlib>
#include<iomanip>


using std::cout;
using std::cin;
using std::endl;
using std::ios;

using std::setw;
using std::setiosflags;
using std::setprecision;

class Item 
{
	private:
		int ID;
		char Nome[100];
		char Desc[100];
		char Validade[11];
		float Preco;
		int Qtdd;
		float Desconto;
		
	public:
		Item *prox;
		
		Item();
		void setPreco(float Preco);
		float getPreco();
		void setDesconto(float Desconto);
		float getDesconto();
		void setQuantidade(int Qtdd);
		int getQuantidade();
		float calculaPrecoTotal();
		bool verificaValidade();
		void displayInfo();
};

class ListaItens {
		private:
			Item *Lista;
		public:
			ListaItens();
			void inserir();
			Item* consultarItem(char Nome[]);
			void excluirItem(char Nome[]);
			float valorTotal();
			void imprimirLista();
};

int main () {
	setlocale(LC_ALL, "portuguese");
	cout<<setiosflags(ios::fixed | ios::showpoint)<<setprecision(2);
	int op;
	ListaItens *L = new ListaItens();
	do{
		cout<<"Deseja terminar? [0] - Sim, [1] - Não ";
		cin>>op;
		
		if(op){
			L->inserir();
		}
	}while(op!=0);
	
	system("cls");
	cout<<"Itens Comprados\n"<<endl;
	L->imprimirLista();
	
	system("pause");
	
	return 0;
}

//Método Construtor da classe
Item::Item(){
	time_t t = time(0);
	ID = t;
	cout<<"ID = "<<ID<<endl;
	cout<<"Nome do Produto: ";
	cin.ignore();
	cin.getline(Nome, 100);
	cout<<"Descricao do Produto: ";
	cin.getline(Desc, 100);
	cout<<"Validade [dd/mm/aaaa]: ";
	cin.getline(Validade, 11);
	
	prox = NULL;
}

//Método para exibir as informações
void Item::displayInfo(){
	cout<<"\nProduto: "<<ID
		<<"\n"<<Nome<<" - "<<Desc
		<<"\nVálido até: "<<Validade
		<<"\nQuantidade: "<<Qtdd
		<<"\nR$"<<Preco<<" - Desconto: "<<Desconto<<"%"<<endl;
}

void Item::setPreco(float Preco){
	this->Preco = Preco;
}

float Item::getPreco(){
	return Preco;
}

void Item::setDesconto(float Desconto){
	this->Desconto = Desconto;
}

float Item::getDesconto(){
	return Desconto;
}

void Item::setQuantidade(int Qtdd){
	this->Qtdd = Qtdd;
}

int Item::getQuantidade() {
	return Qtdd;
}

float Item::calculaPrecoTotal(){
	float precoFinal;
	
	precoFinal = Qtdd*(Preco - Preco*(Desconto/100));
	
	return precoFinal;
}


bool Item::verificaValidade(){
	int dia, mes, ano;
	bool eValido = true;
	time_t t = time(0);   // obter a hora atual
    struct tm *now = localtime( & t );
	
	dia = atoi(Validade);
	mes = atoi(&Validade[3]);
	ano = atoi(&Validade[6]);
	
	if((now->tm_year+1900) > ano){
		eValido = false;
	}
	else if((now->tm_year+1900) == ano && (now->tm_mon+1) > mes) {
		eValido = false;
	}
	else if((now->tm_year+1900) == ano && (now->tm_mon+1) == mes && now->tm_mday > dia) {
		eValido = false;
	}
	return eValido;
}

ListaItens::ListaItens(){
	Lista = NULL;
}

void ListaItens::inserir(){
	Item *Novo = new Item();
	if(Novo->verificaValidade()) {
		cout<<"\nInforme o preço do item: ";
		float preco;
		cin>>preco;
		Novo->setPreco(preco);
	
		cout<<"\nInforme o desconto: ";
		float desconto;
		cin>>desconto;
		Novo->setDesconto(desconto);
		
		cout<<"\nInforme a quantidade: ";
		int Qtdd;
		cin>>Qtdd;
		Novo->setQuantidade(Qtdd);
		
		Novo->prox = Lista;
		Lista = Novo;
	}
	else
		cout<<"\n O item está fora da validade e não pode ser inserido\n\n";
}

void ListaItens::imprimirLista(){
	Item *aux;
	
	aux = Lista;
	while(aux!=NULL){
		cout<<"\n";
		aux->displayInfo();
		aux = aux->prox;
	}
}
